version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: yublog_db
    environment:
      POSTGRES_DB: yublog
      POSTGRES_USER: yublog
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_db_password_123}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yublog -d yublog"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres 
        -c log_statement=all
        -c log_connections=on
        -c log_disconnections=on

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: yublog_redis
    command: >
      redis-server 
        --requirepass ${REDIS_PASSWORD:-dev_redis_password_456}
        --appendonly yes
        --appendfsync everysec
        --maxmemory 256mb
        --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-dev_redis_password_456}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Flask Backend API (Original - can be disabled)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yublog_backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://yublog:${DB_PASSWORD:-dev_db_password_123}@db:5432/yublog
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password_456}@redis:6379/0
      
      # Security Keys (CHANGE THESE IN PRODUCTION!)
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev_jwt_secret_key_for_development_only}
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_for_development_only}
      
      # WebAuthn Configuration
      WEBAUTHN_RP_ID: ${WEBAUTHN_RP_ID:-localhost}
      WEBAUTHN_RP_NAME: ${WEBAUTHN_RP_NAME:-YuBlog Development}
      WEBAUTHN_ORIGIN: ${WEBAUTHN_ORIGIN:-https://localhost}
      
      # Flask Environment
      FLASK_ENV: ${FLASK_ENV:-development}
      PORT: 5000
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./backend/logs:/app/logs
    profiles:
      - flask  # Optional profile to run Flask backend

  # Express Backend API (New - with SimpleWebAuthn)
  backend-js:
    build:
      context: ./backend-js
      dockerfile: Dockerfile
    container_name: yublog_backend_js
    environment:
      # Node Environment
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      
      # Database Configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: yublog
      DB_USER: yublog
      DB_PASSWORD: ${DB_PASSWORD:-dev_db_password_123}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password_456}@redis:6379
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev_jwt_secret_key_for_development_only}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      
      # WebAuthn Configuration
      WEBAUTHN_RP_NAME: ${WEBAUTHN_RP_NAME:-YuBlog Development}
      WEBAUTHN_RP_ID: ${WEBAUTHN_RP_ID:-localhost}
      WEBAUTHN_ORIGIN: ${WEBAUTHN_ORIGIN:-https://localhost}
      
      # CORS Configuration
      CLIENT_ORIGIN: ${WEBAUTHN_ORIGIN:-https://localhost}
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://localhost/api}
        REACT_APP_WEBAUTHN_RP_ID: ${WEBAUTHN_RP_ID:-localhost}
    container_name: yublog_frontend
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: yublog_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
    depends_on:
      backend-js:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Background Task Worker (Optional - for future features)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yublog_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://yublog:${DB_PASSWORD:-dev_db_password_123}@db:5432/yublog
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password_456}@redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev_jwt_secret_key_for_development_only}
    depends_on:
      - db
      - redis
    networks:
      - backend
    restart: unless-stopped
    profiles:
      - worker

  # Session Cleanup Scheduler
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yublog_scheduler
    command: >
      sh -c "
        while true; do
          sleep 3600
          python -m flask cleanup-sessions
        done
      "
    environment:
      DATABASE_URL: postgresql://yublog:${DB_PASSWORD:-dev_db_password_123}@db:5432/yublog
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_password_456}@redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - backend
    restart: unless-stopped

networks:
  frontend:
    name: yublog_frontend
    driver: bridge
  backend:
    name: yublog_backend
    driver: bridge
    internal: true

volumes:
  postgres_data:
    name: yublog_postgres_data
    driver: local
  redis_data:
    name: yublog_redis_data
    driver: local

# Security and monitoring extensions (optional)
x-security-extensions:
  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: yublog_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 86400
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: yublog_loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend
    restart: unless-stopped
    profiles:
      - monitoring

  # Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: yublog_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - backend
    restart: unless-stopped
    profiles:
      - monitoring 