version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: yublog_db_flask
    environment:
      POSTGRES_DB: yublog
      POSTGRES_USER: yublog
      POSTGRES_PASSWORD: ${DB_PASSWORD:-CHANGE_ME_IN_PRODUCTION_123!}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data_flask:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    restart: unless-stopped
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yublog -d yublog"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: yublog_redis_flask
    command: redis-server --requirepass ${REDIS_PASSWORD:-CHANGE_ME_IN_PRODUCTION_456!}
    volumes:
      - redis_data_flask:/data
    networks:
      - backend
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Backend API (Alternative Implementation)
  backend-flask:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yublog_backend_flask
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://yublog:${DB_PASSWORD:-CHANGE_ME_IN_PRODUCTION_123!}@db:5432/yublog
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-CHANGE_ME_IN_PRODUCTION_456!}@redis:6379/0
      
      # Security Keys (CHANGE THESE IN PRODUCTION!)
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-GENERATE_NEW_JWT_SECRET_FOR_PRODUCTION}
      SECRET_KEY: ${SECRET_KEY:-GENERATE_NEW_SECRET_KEY_FOR_PRODUCTION}
      
      # WebAuthn Configuration
      WEBAUTHN_RP_ID: ${WEBAUTHN_RP_ID:-localhost}
      WEBAUTHN_RP_NAME: ${WEBAUTHN_RP_NAME:-YuBlog Flask}
      WEBAUTHN_ORIGIN: ${WEBAUTHN_ORIGIN:-http://localhost:3001}
      
      # Flask Environment
      FLASK_ENV: development
      PORT: 5000
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: unless-stopped
    ports:
      - "5001:5000"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./backend/logs:/app/logs

  # React Frontend (configured for Flask backend)
  frontend-flask:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5001
        - REACT_APP_WEBAUTHN_RP_ID=localhost
    container_name: yublog_frontend_flask
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - REACT_APP_WEBAUTHN_RP_ID=localhost
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - frontend
    restart: unless-stopped
    ports:
      - "3001:3000"  # Different port to avoid conflicts
    depends_on:
      - backend-flask
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend:
    name: yublog_backend_flask
    driver: bridge
  frontend:
    name: yublog_frontend_flask
    driver: bridge

volumes:
  postgres_data_flask:
    name: yublog_postgres_data_flask
    driver: local
  redis_data_flask:
    name: yublog_redis_data_flask
    driver: local 